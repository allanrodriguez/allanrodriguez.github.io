{"version":3,"file":"component---src-pages-projects-index-tsx-37d47ddb64098f11c0cb.js","mappings":"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","sources":["webpack://allanrodriguez.github.io/./node_modules/react-bootstrap/esm/Ratio.js","webpack://allanrodriguez.github.io/./src/pages/projects/index.tsx"],"sourcesContent":["import _defineProperty from \"/Users/allan/Code/Web/allanrodriguez.github.io/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutProperties from \"/Users/allan/Code/Web/allanrodriguez.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"bsPrefix\", \"className\", \"children\", \"aspectRatio\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultProps = {\n  aspectRatio: '1x1'\n};\n\nfunction toPercent(num) {\n  if (num <= 0 || num > 100) return '100%';\n  if (num < 1) return \"\".concat(num * 100, \"%\");\n  return \"\".concat(num, \"%\");\n}\n\nvar Ratio = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      children = _ref.children,\n      aspectRatio = _ref.aspectRatio,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'ratio');\n  var isCustomRatio = typeof aspectRatio === 'number';\n  return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({\n    ref: ref\n  }, props), {}, {\n    style: _objectSpread(_objectSpread({}, style), isCustomRatio && {\n      '--bs-aspect-ratio': toPercent(aspectRatio)\n    }),\n    className: classNames(bsPrefix, className, !isCustomRatio && \"\".concat(bsPrefix, \"-\").concat(aspectRatio)),\n    children: React.Children.only(children)\n  }));\n});\nRatio.defaultProps = defaultProps;\nexport default Ratio;","import { PageProps } from \"gatsby\";\nimport React from \"react\";\nimport Ratio from \"react-bootstrap/Ratio\";\nimport Layout from \"../../components/layout\";\nimport \"../global.css\";\n\nconst ProjectsPage: React.FC<PageProps> = () => {\n  return (\n    <Layout className=\"pt-3\">\n      <h2>Projects</h2>\n      <br />\n      <h4>Chess-playing robot</h4>\n      <h6>\n        <a\n          href=\"https://github.com/allanrodriguez/JellyAI\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          GitHub repository\n        </a>\n      </h6>\n      <Ratio className=\"my-3\" aspectRatio=\"16x9\">\n        <iframe\n          className=\"embed-responsive-item\"\n          allowFullScreen\n          src=\"https://www.youtube.com/embed/25QUqpAvNnE?rel=0\"\n          title=\"Jelly in action\"\n        >\n          There's nothing here.\n        </iframe>\n      </Ratio>\n      <p>\n        For my final senior design project, two other students in my major and I\n        teamed up to build a system that enables a chess engine to read and\n        manipulate a physical chessboard. In short, we created a robot that can\n        play a real-life chess match with anyone!\n      </p>\n      <p>\n        The system, affectionately known as{\" \"}\n        <b title=\"Our team's name was JAM and Jelly. The human members were JAM (James, Allan, Mario), so we named our robot counterpart Jelly (hehe get it?)\">\n          Jelly\n        </b>\n        , consists of a Raspberry Pi that runs the chess engine and an optical\n        recognition program (both written in C++), and an Arduino to control the\n        robot arm's servo motors. The flow of control is as follows:\n      </p>\n      <ol type=\"1\">\n        <li>\n          After the opponent makes a move, the optical recognition program sets\n          out to detect the moved piece.\n        </li>\n        <li>\n          The opponent's move is passed to the chess engine, which first\n          determines if the move was legal.\n          <ol type=\"a\">\n            <li>\n              If the move was legal, then the chess engine calculates the\n              system's move, and passes it to the Arduino.\n            </li>\n            <li>\n              If the move was illegal, then the system displays a message to the\n              opponent asking them to move the piece back to its previous place.\n            </li>\n          </ol>\n        </li>\n        <li>\n          The Arduino processes the move, and converts it to a series of\n          instructions for the arm's servos. The arm then performs the move, and\n          Jelly makes a final check to ensure that the move was made correctly.\n        </li>\n      </ol>\n      <p>\n        Jelly's development was divided into three parts: programming the arm to\n        move and grab chess pieces off the board, developing the program through\n        which Jelly uses a camera mounted over the board to detect board moves,\n        and the chess engine that holds the state of the board and the\n        algorithms for Jelly to calculate moves of its own. I was in charge of\n        the latter, building the board and pieces, programming the rules of\n        chess, and developing the brains of the chess engine.\n      </p>\n      <p>\n        Once the board, pieces, and rules were created, I was in charge of\n        testing the rules to ensure that Jelly accurately discerned between\n        legal and illegal moves in all situations. Most of the bugs were fixed\n        about halfway through the project, but more obscure situations plagued\n        my tests throughout development, specifically with the king and getting\n        in and out of check.\n      </p>\n      <p>\n        After rule testing was complete, I began to build the chess engine. I\n        could've modified an existing chess engine to be compatible with my\n        partners' interfaces, but I felt like I could build a decent chess\n        engine on my own. I researched existing chess engines, as well as\n        chess-playing techniques, before beginning to code Jelly's engine.\n        Because of the Raspberry Pi's memory constraints, I decided to make the\n        engine look only three{\" \"}\n        <b title=\"A ply, or half-move, occurs when a single player moves a piece. After both players have moved a piece, a move, or full move, has occurred.\">\n          plies\n        </b>{\" \"}\n        ahead to decide the best move. However, even then, the tree structure I\n        had constructed resulted in tens of millions of possibilities as the\n        game went on, and Jelly would eventually crash. To correct this, I\n        implemented the alpha-beta pruning algorithm.\n      </p>\n      <p>\n        <a\n          href=\"https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          Alpha-beta pruning\n        </a>{\" \"}\n        works by eliminating branches of moves that would result in moves that\n        are either poorer than those in other branches, or have been found in\n        other branches. Implementing this function yielded great results,\n        reducing the move tree's memory requirements by 90%; Jelly no longer\n        crashed! In the end, my chess engine was operational; it showed that it\n        could capture enemy pieces and eventually put the opponent in checkmate.\n        It could have done with more work, however, since it wasn't as\n        aggressive as I hoped it would be.\n      </p>\n      <p>\n        Building Jelly's chess engine taught me much on the need to optimize\n        code to reduce space and computational footprints. Jelly had to be both\n        operational and responsive, especially on the low-power Raspberry Pi it\n        was running on. To that effect, I had to reduce the number of plies that\n        the engine looked ahead to so that the program wouldn't take too long to\n        run, and prune the resulting tree.\n      </p>\n      <p>\n        It was exciting to be able to work with my teammates to put this\n        together in the end and play with the robotic partner we created. Maybe\n        one day, we'll make Jelly a must-have item for anyone looking for a\n        worthy opponent!\n      </p>\n    </Layout>\n  );\n};\n\nexport default ProjectsPage;\n"],"names":["_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Ratio","_ref","ref","bsPrefix","className","children","aspectRatio","style","props","num","isCustomRatio","concat","defaultProps","React","Layout","href","rel","allowFullScreen","src","title","type"],"sourceRoot":""}